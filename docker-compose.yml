version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: teams-extractor-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-teams_extractor}
      POSTGRES_USER: ${POSTGRES_ADMIN_USER:-teams_admin}
      POSTGRES_PASSWORD: ${POSTGRES_ADMIN_PASSWORD:-changeme}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - teams-extractor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_ADMIN_USER:-teams_admin} -d ${POSTGRES_DB:-teams_extractor}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: teams-extractor-redis
    command: redis-server --appendonly yes ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - teams-extractor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Node.js Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: teams-extractor-backend
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-5000}
      DATABASE_URL: postgresql://${POSTGRES_ADMIN_USER:-teams_admin}:${POSTGRES_ADMIN_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-teams_extractor}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${PORT:-5000}:5000"
    volumes:
      - backend_logs:/app/logs
    networks:
      - teams-extractor-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend
  frontend:
    build:
      context: ./web-gui/frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:5000/api}
        REACT_APP_WS_URL: ${REACT_APP_WS_URL:-http://localhost:5000}
    container_name: teams-extractor-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    networks:
      - teams-extractor-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Server (for Claude Desktop)
  mcp-server:
    build:
      context: ./mcp-server
      dockerfile: Dockerfile
    container_name: teams-extractor-mcp
    environment:
      MCP_DATABASE_URL: postgresql://mcp_reader:${MCP_READER_PASSWORD:-mcp_reader_password}@postgres:5432/${POSTGRES_DB:-teams_extractor}
      NODE_ENV: ${NODE_ENV:-production}
    networks:
      - teams-extractor-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    # MCP server uses stdio, so it's mainly for testing in docker
    # For actual use with Claude Desktop, run locally

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: teams-extractor-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - teams-extractor-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    profiles:
      - with-nginx

  # Grafana Monitoring (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: teams-extractor-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_SERVER_ROOT_URL: http://localhost:${GRAFANA_PORT:-3001}
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - teams-extractor-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Prometheus (Optional, for metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: teams-extractor-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION_TIME:-15d}'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - teams-extractor-network
    depends_on:
      - backend
    restart: unless-stopped
    profiles:
      - monitoring

networks:
  teams-extractor-network:
    driver: bridge
    name: teams-extractor-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
